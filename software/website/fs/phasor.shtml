<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
<!-----    <meta http-equiv="refresh" content="1"> --->
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon.png">
    <title><!--#NAME--></title>
  </head>

<script type="text/javascript">

var Unominal = 230;
var Inominal = 16;

var interval = 100;

var data = {};

function round(x, a){
	return(Math.round(x * a) / a)
}

function clamp(x, a){
	return((-a < x) ? ((a < x) ? (a) : (x)) : (-a));
}

function drawArrowhead(context, from, to, radius) {
	var x_center = to.x;
	var y_center = to.y;

	var angle;
	var x;
	var y;

	context.beginPath();

	angle = Math.atan2(to.y - from.y, to.x - from.x)
	x = radius * Math.cos(angle) + x_center;
	y = radius * Math.sin(angle) + y_center;

	context.moveTo(x, y);

	angle += (1.0/3.0) * (2 * Math.PI)
	x = radius * Math.cos(angle) + x_center;
	y = radius * Math.sin(angle) + y_center;

	context.lineTo(x, y);

	angle += (1.0/3.0) * (2 * Math.PI)
	x = radius *Math.cos(angle) + x_center;
	y = radius *Math.sin(angle) + y_center;

	context.lineTo(x, y);

	context.closePath();

	context.fill();
}

function draw_vec(){
	var canvas = document.getElementById('canvas_plot');
	if (canvas.getContext){
		var ctx = canvas.getContext('2d');
		var w = canvas.width;
		var h = canvas.height;

		//clear
		ctx.clearRect(0, 0, w, h);
		ctx.beginPath();
		
		ctx.save();
		ctx.translate(w / 2, h / 2); //put (0,0) in the center
		ctx.strokeStyle="black";
		// limit circle
		ctx.arc(0, 0, (h-100) / 2, 0, 2 * Math.PI);
      // ctx.arc(0, 0, h / 2 * 2 / Math.sqrt(3), 0, 2 * Math.PI);

		// labels
		ctx.font = "bold 16px serif";
		//ctx.fillText("L1", w / 2 - 24, 4);
		ctx.stroke();
		//ctx.fillText("V", Math.cos(1 / 3 * 2 * Math.PI) * w / 2, Math.sin(120 / 180 * Math.PI) * h / 2);
		//ctx.fillText("W", Math.cos(2 / 3 * 2 *Math.PI) * w / 2, Math.sin(240 / 180 * Math.PI) * h / 2 + 10);
		//ctx.fillText("W", -4, 10 - h / 2);
        ctx.lineWidth = 4; 
		// vector
		// L1 voltage
		ctx.beginPath();
        ctx.moveTo(0, 0);
		ctx.strokeStyle="sienna";
		ctx.lineTo(data.U.L1/Unominal * (w-100)/2, 0);
		ctx.stroke();
        ctx.fillText("UL1", (data.U.L1/Unominal * (w-100)/2+20), 20);
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(0, 0);
		ctx.strokeStyle="black";
		ctx.lineTo((data.U.L2/Unominal * (w-100)/2)*Math.cos(data.ang_U.L2/180*Math.PI), (data.U.L2/Unominal * (w-100)/2)*Math.sin(data.ang_U.L2/180*Math.PI)*-1);
		ctx.stroke();
        ctx.fillText("UL2", (data.U.L2/Unominal * (w-100)/2+20)*Math.cos(data.ang_U.L2/180*Math.PI), (data.U.L2/Unominal * (w-100)/2+20)*Math.sin(data.ang_U.L2/180*Math.PI)*-1);
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(0, 0);
		ctx.strokeStyle="grey";
		ctx.lineTo((data.U.L3/Unominal * (w-100)/2)*Math.cos(data.ang_U.L3/180*Math.PI), (data.U.L3/Unominal * (w-100)/2)*Math.sin(data.ang_U.L3/180*Math.PI)*-1);
		ctx.stroke();
        ctx.fillText("UL3", (data.U.L3/Unominal * (w-100)/2+20)*Math.cos(data.ang_U.L3/180*Math.PI), (data.U.L3/Unominal * (w-100)/2+20)*Math.sin(data.ang_U.L3/180*Math.PI)*-1);
        ctx.stroke();
      //cur vector
      ctx.beginPath();
        ctx.moveTo(0, 0);
		ctx.strokeStyle="sienna";
		ctx.lineTo((data.I.L1/Inominal * (w-100)/2)*Math.cos(data.ang_I.L1/180*Math.PI), (data.I.L1/Inominal * (w-100)/2)*Math.sin(data.ang_I.L1/180*Math.PI)*-1);
		ctx.stroke();
        ctx.fillText("IL1", (data.I.L1/Inominal * (w-100+20)/2)*Math.cos(data.ang_I.L1/180*Math.PI), (data.I.L1/Inominal * (w-100+20)/2)*Math.sin(data.ang_I.L1/180*Math.PI)*-1);
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(0, 0);
		ctx.strokeStyle="black";
		ctx.lineTo((data.I.L2/Inominal * (w-100)/2)*Math.cos((data.ang_I.L2+120)/180*Math.PI), (data.I.L2/Inominal * (w-100)/2)*Math.sin((data.ang_I.L2+120)/180*Math.PI)*-1);
		ctx.stroke();
        ctx.fillText("IL2", (data.I.L2/Inominal * (w-100)/2+20)*Math.cos((data.ang_I.L2+120)/180*Math.PI), (data.I.L2/Inominal * (w-100)/2+20)*Math.sin((data.ang_I.L2+120)/180*Math.PI)*-1);
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(0, 0);
		ctx.strokeStyle="grey";
		ctx.lineTo((data.I.L3/Inominal * (w-100)/2)*Math.cos((data.ang_I.L3+240)/180*Math.PI), (data.I.L3/Inominal * (w-100)/2)*Math.sin((data.ang_I.L3+240)/180*Math.PI)*-1);
		ctx.stroke();
        ctx.fillText("IL3", (data.I.L3/Inominal * (w-100)/2+20)*Math.cos((data.ang_I.L3+240)/180*Math.PI), (data.I.L3/Inominal * (w-100)/2+20)*Math.sin((data.ang_I.L3+240)/180*Math.PI)*-1);
        ctx.stroke();

		ctx.fillText("L1: ".concat(data.U.L1.toFixed(2).concat("V ".concat(data.I.L1.toFixed(2).concat("A")))), -490,-480);
		ctx.fillText("L2: ".concat(data.U.L2.toFixed(2).concat("V ".concat(data.I.L2.toFixed(2).concat("A")))), -490,-460);
		ctx.fillText("L3: ".concat(data.U.L3.toFixed(2).concat("V ".concat(data.I.L3.toFixed(2).concat("A")))), -490,-440);
		ctx.stroke();
		
		ctx.restore();
	}
}

function loadDoc() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
            try {
                data = JSON.parse(this.responseText);
                draw_vec();
            } catch (e) {
                console.log(e);
            }
       } 
       if(this.readyState == 4) {
            setTimeout(loadDoc, interval);
       }
    };
    xhttp.open("GET", "http://192.168.178.206/test.json", true);
    xhttp.send();
}

</script>
</head>
<style type="text/css">
input:button {width : 500px}
</style>

<body>
	<canvas id="canvas_plot" width="1000" height="1000">
		not supported
    </canvas>
    <script>
    //var data = <!--#PHASOR-->
    loadDoc();
    </script>
</body>
</html>
