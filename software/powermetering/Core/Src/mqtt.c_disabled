#include "mqtt.h"

static void mqtt_sub_request_cb(void *arg, err_t result)
{
  /* Just print the result code here for simplicity, 
     normal behaviour would be to take some action if subscribe fails like 
     notifying user, retry subscribe or disconnect from server */
  SEGGER_RTT_printf(0, "Subscribe result: %d\n", result);
}

ip4_addr_t mqtt_server_addr;

void example_do_connect(mqtt_client_t *client);

static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
  err_t err;
  SEGGER_RTT_printf(0, "Entered conn_cb...\n");
  if (status == MQTT_CONNECT_ACCEPTED)
  {
    SEGGER_RTT_printf(0, "mqtt_connection_cb: Successfully connected\n");
  }
}

mqtt_client_t static_client;

/* Called when publish is complete either with sucess or failure */
static void mqtt_pub_request_cb(void *arg, err_t result)
{
  if (result != ERR_OK)
  {
    SEGGER_RTT_printf(0, "Publish result: %d\n", result);
  }
}

void example_publish(mqtt_client_t *client, void *arg)
{
  float airms = ((foobar.airms1012_h << 16) + foobar.airms1012_l) / CUR_CONST;
  float birms = ((foobar.birms1012_h << 16) + foobar.birms1012_l) / CUR_CONST;
  float cirms = ((foobar.cirms1012_h << 16) + foobar.cirms1012_l) / CUR_CONST;
  float nirms = ((foobar.nirms1012_h << 16) + foobar.nirms1012_l) / CUR_CONST;

  float avrms = ((foobar.avrms1012_h << 16) + foobar.avrms1012_l) / VOLT_CONST;
  float bvrms = ((foobar.bvrms1012_h << 16) + foobar.bvrms1012_l) / VOLT_CONST;
  float cvrms = ((foobar.cvrms1012_h << 16) + foobar.cvrms1012_l) / VOLT_CONST;

  float avthd = ((foobar.avthd_h << 16) + foobar.avthd_l) * powf(2, -27);
  float bvthd = ((foobar.bvthd_h << 16) + foobar.bvthd_l) * powf(2, -27);
  float cvthd = ((foobar.cvthd_h << 16) + foobar.cvthd_l) * powf(2, -27);

  float aithd = ((foobar.aithd_h << 16) + foobar.aithd_l) * powf(2, -27);
  float bithd = ((foobar.bithd_h << 16) + foobar.bithd_l) * powf(2, -27);
  float cithd = ((foobar.cithd_h << 16) + foobar.cithd_l) * powf(2, -27);

  float apf = ((foobar.apf_h << 16) + foobar.apf_l) * powf(2, -27);
  float bpf = ((foobar.bpf_h << 16) + foobar.bpf_l) * powf(2, -27);
  float cpf = ((foobar.cpf_h << 16) + foobar.cpf_l) * powf(2, -27);

  int32_t ahz_i = (ahz[3] << 24) + (ahz[2] << 16) + (ahz[5] << 8) + ahz[4];
  int32_t bhz_i = (bhz[3] << 24) + (bhz[2] << 16) + (bhz[5] << 8) + bhz[4];
  int32_t chz_i = (chz[3] << 24) + (chz[2] << 16) + (chz[5] << 8) + chz[4];
  float ahz_f = (8000.0f * powf(2.0f, 16.0f)) / (ahz_i + 1.0f);
  float bhz_f = (8000.0f * powf(2.0f, 16.0f)) / (bhz_i + 1.0f);
  float chz_f = (8000.0f * powf(2.0f, 16.0f)) / (chz_i + 1.0f);

  char insert[200];
  //int len = snprintf(insert, 200 - 2, "L1: %.2lfV L2: %.2lfV L3: %.2lfV L1: %.2lfA L2: %.2lfA L3: %.2lfA N: %.2lfA", avrms, bvrms, cvrms, airms, birms, cirms, nirms);
  int len = snprintf(insert, 200 - 2, "%.2f;%.2f;%.2f;%.2f;%.2f;%.2f;%.2f;%.3f;%3f;%3f;%3f;%3f;%3f;%3f;%3f;%3f;%.4f;%.4f;%.4f;", avrms, bvrms, cvrms, airms, birms, cirms, nirms, avthd, bvthd, cvthd, aithd, bithd, cithd, apf, bpf, cpf, ahz_f, bhz_f, chz_f);
  err_t err;
  u8_t qos = 2;    /* 0 1 or 2, see MQTT specification */
  u8_t retain = 0; /* No don't retain such crappy payload... */
  err = mqtt_publish(client, "trifasipower", insert, len, qos, retain, mqtt_pub_request_cb, arg);
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
  if (err != ERR_OK)
  {
    SEGGER_RTT_printf(0, "Publish err: %d\n", err);
    if(err == -11) {
      example_do_connect(&static_client);
      SEGGER_RTT_printf(0, "Connecting due to error...\n");
    }
  }
}

void example_do_connect(mqtt_client_t *client)
{
  struct mqtt_connect_client_info_t ci;
  err_t err;

  /* Setup an empty client info structure */
  memset(&ci, 0, sizeof(ci));

  /* Minimal amount of information required is client identifier, so set it here */
  ci.client_id = "lwip_test";

  /* Initiate client and connect to server, if this fails immediately an error code is returned
     otherwise mqtt_connection_cb will be called with connection result after attempting 
     to establish a connection with the server. 
     For now MQTT version 3.1.1 is always used */
  SEGGER_RTT_printf(0, "Trying to connect...\n");
  err = mqtt_client_connect(client, &mqtt_server_addr, MQTT_PORT, mqtt_connection_cb, 0, &ci);

  /* For now just print the result code if something goes wrong */
  if (err != ERR_OK)
  {
    SEGGER_RTT_printf(0, "mqtt_connect return %d\n", err);
  }
}

void mqtt_stuff(void)
{
  vTaskDelay(2000);
  IP4_ADDR(&mqtt_server_addr, 192, 168, 178, 121);
  SEGGER_RTT_printf(0, "Entered mqtt...\n");
  example_do_connect(&static_client);
  while (1)
  {
    example_publish(&static_client, 0);
    vTaskDelay(1000);
  }
}

//xTaskCreate((TaskFunction_t)mqtt_stuff, "Do MQTT stuff", 1024, NULL, configMAX_PRIORITIES - 3, NULL);
